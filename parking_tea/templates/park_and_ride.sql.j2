WITH selected_stops AS (
SELECT DISTINCT ON (stops.end_name) stops.end_name, stops.dur, stops.trans, osm_point.way from (
with recursive path(hop, duration, line, start_stop_id, end_stop_id, start_name, end_name, route, transfers) as (
	select 1, 0, c.line, c.start_stop_id, c.end_stop_id, ss.name, es.name, array[ss.name, es.name], array[c.line]
	from connections c
	join stops ss on ss.id = c.start_stop_id
	join stops es on es.id = c.end_stop_id
	where ss.name = '{{ stop_name }}'
	and c.line not like 'N%'

	union

	select p.hop + 1, p.duration + c.duration, c.line, c.start_stop_id, c.end_stop_id, ss.name, es.name, p.route || es.name,
			case when c.line = any(p.transfers)
				then p.transfers
				else p.transfers || c.line
			end
	from path p
	join connections c on p.end_stop_id = c.start_stop_id
	join stops ss on ss.id = c.start_stop_id
	join stops es on es.id = c.end_stop_id

	where not es.name = any(p.route)
	and p.line = c.line or not c.line = any(p.transfers)
	and es.name != '{{ stop_name }}'
	and array_length(p.transfers, 1) < 2
	and c.line not like 'N%'
)
select p.end_name, min(p.route) as routes, min(p.duration) as dur, min(p.transfers) as trans from path p
where p.duration < 30
group by p.end_name
order by dur
) as stops
JOIN osm_point ON stops.end_name = osm_point.name
		AND osm_point.public_transport = 'stop_position'
		AND osm_point.operator = 'DPB'
)

SELECT DISTINCT ON (ST_Distance, osm_id)
  'polygon' as type,
  pol.name,
  pol.tags,
  pol.way_area as area,
  ST_AsGeoJSON(ST_Transform(ST_Centroid(pol.way), 4326)),
  ST_Distance(
	  ST_GeogFromText('POINT({{ longitude }} {{ latitude }})'),
	  ST_Transform(ST_Centroid(pol.way), 4326)::geography),
  selected_stops.end_name as bus_stop,
  selected_stops.dur,
  array_to_json(selected_stops.trans) as transfers
FROM osm_polygon pol
JOIN selected_stops ON ST_DWithin(pol.way, selected_stops.way, 500)
WHERE pol.amenity = 'parking'
AND pol.way_area > 4000
ORDER BY ST_Distance
LIMIT 20