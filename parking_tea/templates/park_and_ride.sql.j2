WITH selected_stops AS (
SELECT DISTINCT ON (stops.end_name) stops.end_name, stops.dur, stops.trans, osm_point.way FROM (
WITH RECURSIVE path(hop, duration, line, start_stop_id, end_stop_id, start_name, end_name, route, transfers) as (
	SELECT 1, 0, c.line, c.start_stop_id, c.end_stop_id, ss.name, es.name, array[ss.name, es.name], array[c.line]
	FROM connections c
	JOIN stops ss ON ss.id = c.start_stop_id
	JOIN stops es ON es.id = c.end_stop_id
	WHERE ss.name = '{{ stop_name }}'
	AND c.line not like 'N%'

	UNION

	SELECT p.hop + 1, p.duration + c.duration, c.line, c.start_stop_id, c.end_stop_id, ss.name, es.name, p.route || es.name,
			CASE WHEN c.line = any(p.transfers)
				THEN p.transfers
				ELSE p.transfers || c.line
			END
	FROM path p
	JOIN connections c ON p.end_stop_id = c.start_stop_id
	JOIN stops ss ON ss.id = c.start_stop_id
	JOIN stops es ON es.id = c.end_stop_id

	WHERE not es.name = any(p.route)
	AND p.line = c.line or not c.line = any(p.transfers)
	AND es.name != '{{ stop_name }}'
	AND array_length(p.transfers, 1) < 2
	AND c.line not like 'N%'
)
SELECT p.end_name, min(p.route) as routes, min(p.duration) as dur, min(p.transfers) as trans FROM path p
WHERE p.duration < 30
GROUP BY p.end_name
ORDER BY dur
) AS stops
JOIN osm_point ON stops.end_name = osm_point.name
		AND osm_point.public_transport = 'stop_position'
		AND osm_point.operator = 'DPB'
)

SELECT DISTINCT ON (distance, osm_id)
  pol.name,
  pol.tags,
  pol.way_area AS area,
  ST_AsGeoJSON(ST_Transform(ST_Centroid(pol.way), 4326)),
  ST_Distance(
	  ST_GeogFromText('POINT({{ longitude }} {{ latitude }})'),
	  ST_Transform(ST_Centroid(pol.way), 4326)::geography) AS distance,
  selected_stops.end_name AS bus_stop,
  selected_stops.dur AS duration,
  array_to_json(selected_stops.trans) AS transfers
FROM osm_polygon pol
JOIN selected_stops ON ST_DWithin(pol.way, selected_stops.way, 500)
WHERE pol.amenity = 'parking'
AND pol.way_area > 4000
ORDER BY distance
LIMIT 20