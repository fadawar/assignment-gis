WITH other_stops AS (
  WITH near_stop AS (
    SELECT name FROM osm_point  {# Vyberie najblizsiu zastavku k nasmu cielu #}
    WHERE public_transport = 'stop_position'
    AND operator = 'DPB'
    ORDER BY ST_Distance(
      ST_GeogFromText('POINT({{ longitude }} {{ latitude }})'),
      ST_Transform(way, 4326)::geography)
    LIMIT 1
	)
	SELECT distinct ON (mhd.target) mhd.target, osm_point.way FROM mhd  {# Vyberie vsetky zastavky z ktorych sa da #}
	JOIN near_stop ON mhd.start = near_stop.name                        {# dostat do cielovej zastavky #}
	JOIN osm_point ON mhd.target = osm_point.name
		AND public_transport = 'stop_position'
		AND operator = 'DPB'
)

SELECT DISTINCT ON (ST_Distance, osm_id)
  'polygon' as type,
  pol.name,
  pol.tags,
  pol.way_area as area,
  ST_AsGeoJSON(ST_Transform(ST_Centroid(pol.way), 4326)),
  ST_Distance(
	  ST_GeogFromText('POINT({{ longitude }} {{ latitude }})'),
	  ST_Transform(ST_Centroid(pol.way), 4326)::geography),
  other_stops.target as bus_stop
FROM osm_polygon pol
JOIN other_stops ON ST_DWithin(pol.way, other_stops.way, 500)
WHERE pol.amenity = 'parking'
AND {{ no_go_area }} < ST_Distance(
	ST_GeogFromText('POINT({{ longitude }} {{ latitude }})'),
	ST_Transform(pol.way, 4326)::geography)

UNION ALL

SELECT DISTINCT ON (ST_Distance, osm_id)
  'point' as type,
  p.name,
  p.tags,
  0 as area,
  ST_AsGeoJSON(ST_Transform(p.way, 4326)),
  ST_Distance(
	  ST_GeogFromText('POINT({{ longitude }} {{ latitude }})'),
	  ST_Transform(p.way, 4326)::geography),
  other_stops.target as bus_stop
FROM osm_point p
JOIN other_stops ON ST_DWithin(p.way, other_stops.way, 500)
WHERE p.amenity = 'parking'
AND {{ no_go_area }} < ST_Distance(
	ST_GeogFromText('POINT({{ longitude }} {{ latitude }})'),
	ST_Transform(p.way, 4326)::geography)

ORDER BY ST_Distance
LIMIT 50